name: CD - Release

on:
  workflow_call:
    inputs:
      release_branch:
        description: "The branch name to release/publish from."
        required: false
        type: string
        default: main
      git_username:
        description: "A git username (used to set the 'user.name' config option)."
        required: true
        type: string
      git_email:
        description: "A git user's email address (used to set the 'user.email' config option)."
        required: true
        type: string
      install_extras:
        description: "Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (`[]`) and be separated by commas (`,`) without any spaces. Example: `'[dev,release]'`."
        required: false
        type: string
        default: ""
      python_version:
        description: "The Python version to use for the workflow."
        required: false
        type: string
        default: "3.9"
      update_docs:
        description: "Whether or not to also run the 'docs' workflow job."
        required: false
        type: boolean
        default: false
      doc_extras:
        description: "Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (`[]`) and be separated by commas (`,`) without any spaces. Note, if this is empty, 'install_extras' will be used as a fallback. Example: `'[docs]'`."
        required: false
        type: string
        default: ""
      build_cmd:
        description: "The package build command, e.g., `'flit build'` or `'python -m build'` (default)."
        required: false
        type: string
        default: "python -m build"
    secrets:
      PyPI_token:
        description: "A PyPI token for publishing the built package to PyPI."
        required: true
      release_PAT:
        description: "A personal access token (PAT) with rights to update the `release_branch`. This will fallback on `GITHUB_TOKEN`."
        required: false

jobs:
  update-and-publish:
    name: Update CHANGELOG and version and publish to PyPI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python ${{ inputs.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ inputs.python_version }}"

    - name: Install Python dependencies
      run: |
        python -m pip install -U pip
        pip install -U setuptools wheel build
        pip install .${{ inputs.install_extras }}

    - name: Update changelog
      uses: CharMixer/auto-changelog-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        release_branch: ${{ inputs.release_branch }}

    - name: Set up git user
      run: |
        git config --global user.name "${{ inputs.git_username }}"
        git config --global user.email "${{ inputs.git_email }}"

    - name: Update version and tag
      run: |
        REF=${{ github.ref }}
        REF=${REF#refs/tags/}
        invoke setver --version="${REF}"

        git commit -am "Release ${REF} - Changelog"

        TAG_MSG=.github/utils/release_tag_msg.txt
        if [ -f ${TAG_MSG} ]; then
          echo "Using found release tag message text file."
        else
          echo -e "TAG_NAME\n\nThe full release changelog can be seen in the\n[repository source file](https://github.com/${{ github.repository }}/blob/TAG_NAME/CHANGELOG.md)." > ${TAG_MSG}
          echo "Using default release tag message."
        fi

        sed -i "s|TAG_NAME|${REF}|" "${TAG_MSG}"
        git tag -af -F "${TAG_MSG}" ${REF}

    - name: Build source distribution
      run: |
        # First, clean the git tree
        git checkout -- .
        ${{ inputs.build_cmd }}

    - name: Update '${{ inputs.release_branch }}'
      uses: CasperWA/push-protected@v2
      with:
        token: ${{ secrets.release_PAT || secrets.GITHUB_TOKEN }}
        branch: ${{ inputs.release_branch }}
        sleep: 15
        force: true
        tags: true
        unprotect_reviews: true

    - name: Get tagged versions
      run: echo "PREVIOUS_VERSION=$(git tag -l --sort -version:refname | sed -n 2p)" >> $GITHUB_ENV

    - name: Create release-specific changelog
      uses: CharMixer/auto-changelog-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        release_branch: ${{ inputs.release_branch }}
        since_tag: "${{ env.PREVIOUS_VERSION }}"
        output: "release_changelog.md"

    - name: Append changelog to release body
      run: |
        gh api /repos/${{ github.repository }}/releases/${{ github.event.release.id }} --jq '.body' > release_body.md
        cat release_changelog.md >> release_body.md
        gh api /repos/${{ github.repository }}/releases/${{ github.event.release.id }} -X PATCH -F body='@release_body.md'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@v1.5.0
      with:
        user: __token__
        password: ${{ secrets.PyPI_token }}

  docs:
    name: Deploy release documentation
    needs: update-and-publish
    runs-on: ubuntu-latest
    if: inputs.update_docs

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ inputs.release_branch }}

    - name: Set up Python ${{ inputs.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ inputs.python_version }}"

    - name: Install Python dependencies
      run: |
        python -m pip install -U pip
        pip install -U setuptools wheel flit
        pip install -U -e .${{ inputs.doc_extras || inputs.install_extras }}

    - name: Set up git user
      run: |
        git config --global user.name "${{ inputs.git_username }}"
        git config --global user.email "${{ inputs.git_email }}"

    - name: Deploy documentation
      run: |
        REF=${{ github.ref }}
        mike deploy --push --remote origin --branch gh-pages --update-aliases --config-file mkdocs.yml ${REF#refs/tags/v} stable
        mike deploy --push --remote origin --branch gh-pages --update-aliases --config-file mkdocs.yml latest ${{ inputs.release_branch }}
