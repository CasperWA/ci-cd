name: CD - Release

on:
  workflow_call:
    inputs:
      # REQUIRED
      git_username:
        description: "A git username (used to set the 'user.name' config option)."
        required: true
        type: string
      git_email:
        description: "A git user's email address (used to set the 'user.email' config option)."
        required: true
        type: string
      # OPTIONAL
      python_package:
        description: "Whether or not this is a Python package, where the version should be updated in the 'package_dir'/__init__.py and a build and release to PyPI should be performed."
        required: false
        type: boolean
        default: true
      package_dir:
        description: "Path to the Python package directory relative to the repository directory. Example: `'src/my_package'`. **Important**: This is _required_ if 'python_package' is 'true', which is the default."
        required: false
        type: string
        default: ""
      release_branch:
        description: "The branch name to release/publish from."
        required: false
        type: string
        default: main
      install_extras:
        description: "Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (`[]`) and be separated by commas (`,`) without any spaces. Example: `'[dev,release]'`."
        required: false
        type: string
        default: ""
      python_version:
        description: "The Python version to use for the workflow."
        required: false
        type: string
        default: "3.9"
      update_docs:
        description: "Whether or not to also run the 'docs' workflow job."
        required: false
        type: boolean
        default: false
      doc_extras:
        description: "Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (`[]`) and be separated by commas (`,`) without any spaces. Note, if this is empty, 'install_extras' will be used as a fallback. Example: `'[docs]'`."
        required: false
        type: string
        default: ""
      build_cmd:
        description: "The package build command, e.g., `'pip install flit && flit build'` or `'python -m build'` (default)."
        required: false
        type: string
        default: "python -m build"
      tag_message_file:
        description: "Relative path to a release tag message file from the root of the repository. Example: `'.github/utils/release_tag_msg.txt'`."
        required: false
        type: string
        default: ""
      test:
        description: "Whether to use the TestPyPI repository index instead of PyPI."
        required: false
        type: boolean
        default: false
      publish_on_pypi:
        description: "Whether or not to publish on PyPI. **Note**: This is only relevant if 'python_package' is 'true', which is the default."
        required: false
        type: boolean
        default: true
      changelog_exclude_tags_regex:
        description: "A regular expression matching any tags that should be excluded from the CHANGELOG.md."
        required: false
        type: string
        default: ""
      changelog_exclude_labels:
        description: "Comma-separated list of labels to exclude from the CHANGELOG.md."
        required: false
        type: string
        default: ""
    secrets:
      PyPI_token:
        description: "A PyPI token for publishing the built package to PyPI. **Important**: This is _required_ if both 'python_package' and 'publish_on_pypi' are 'true'. Both are 'true' by default."
        required: false
      PAT:
        description: "A personal access token (PAT) with rights to update the `release_branch`. This will fallback on `GITHUB_TOKEN`."
        required: false

jobs:
  update-and-publish:
    name: Update CHANGELOG and version and publish to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        path: main

    - name: Checkout CasperWA/gh-actions
      uses: actions/checkout@v3
      with:
        repository: CasperWA/gh-actions
        ref: main
        path: gh-actions

    - name: Set up Python ${{ inputs.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ inputs.python_version }}"

    - name: Install Python dependencies
      run: |
        python -m pip install -U pip
        pip install -U setuptools wheel build
        pip install ./main${{ inputs.install_extras }}
        pip install -r ./gh-actions/requirements.txt

    - name: Update changelog
      uses: CharMixer/auto-changelog-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        release_branch: ${{ inputs.release_branch }}
        exclude_tags_regex: "${{ inputs.changelog_exclude_tags_regex }}"
        exclude_labels: "${{ inputs.changelog_exclude_labels }}"

    - name: Move CHANGELOG.md
      run: mv CHANGELOG.md ./main/CHANGELOG.md

    - name: Set up git user
      run: |
        git config --global user.name "${{ inputs.git_username }}"
        git config --global user.email "${{ inputs.git_email }}"

    - name: Update version and tag
      run: |
        REF=${{ github.ref }}
        REF=${REF#refs/tags/}

        if [ "${{ inputs.python_package }}" == "true" ]; then
          if [ -z "${{ inputs.package_dir }}" ]; then
            echo "package_dir MUST be supplied, since python_package was set to 'true'."
            exit 1
          fi
          invoke setver --version="${REF}" --repo-folder=main --package-dir=${{ inputs.package_dir }}
        fi

        MAIN_DIR="${{ github.workspace }}/main"

        git -C ${MAIN_DIR} commit -am "Release ${REF} - Changelog"

        if [ -z "${{ inputs.tag_message_file }}" ] || [ ! -f "main/${{ inputs.tag_message_file }}" ]; then
          TAG_MSG_FILE=${{ github.workspace }}/.tmp_tag-msg_${{ github.run_id }}_${{ github.run_number }}_${{ github.run_attempt }}.txt

          echo -e "TAG_NAME\n\nThe full release changelog can be seen in the\n[repository source file](https://github.com/${{ github.repository }}/blob/TAG_NAME/CHANGELOG.md)." > ${TAG_MSG_FILE}
          echo "Using default release tag message."
          REMOVE_TAG_MSG_FILE=true
        else
          echo "Using found release tag message text file at ${{ inputs.tag_message_file }}."
          TAG_MSG_FILE=main/${{ inputs.tag_message_file }}
          REMOVE_TAG_MSG_FILE=false
        fi

        sed -i "s|TAG_NAME|${REF}|" "${TAG_MSG_FILE}"
        git -C ${MAIN_DIR} tag -af -F "${TAG_MSG_FILE}" ${REF}

        if [ "${REMOVE_TAG_MSG_FILE}" == "true" ]; then rm -f "${TAG_MSG_FILE}"; fi
        if [ $(git -C ${MAIN_DIR} tag -l | wc -l) -eq 1 ]; then
          echo "FIRST_RELEASE=true" >> $GITHUB_ENV
        else
          echo "FIRST_RELEASE=false" >> $GITHUB_ENV
        fi
      working-directory: ./gh-actions

    - name: Build source distribution
      run: |
        # First, clean the git tree
        git checkout -- .
        ${{ inputs.build_cmd }}
      working-directory: ./main

    - name: Update '${{ inputs.release_branch }}'
      uses: CasperWA/push-protected@v2
      with:
        token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
        branch: ${{ inputs.release_branch }}
        sleep: 15
        force: true
        tags: true
        unprotect_reviews: true
        debug: ${{ inputs.test }}
        path: main

    - name: Get tagged versions
      run: |
        if [ "${{ env.FIRST_RELEASE }}" == "false" ]; then
          echo "PREVIOUS_VERSION=$(git tag -l --sort -version:refname | sed -n 2p)" >> $GITHUB_ENV
        else
          echo "PREVIOUS_VERSION=" >> $GITHUB_ENV
        fi
      working-directory: ./main

    - name: Create release-specific changelog
      uses: CharMixer/auto-changelog-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        release_branch: ${{ inputs.release_branch }}
        since_tag: "${{ env.PREVIOUS_VERSION }}"
        output: "release_changelog.md"
        exclude_tags_regex: "${{ inputs.changelog_exclude_tags_regex }}"
        exclude_labels: "${{ inputs.changelog_exclude_labels }}"

    - name: Append changelog to release body
      run: |
        gh api /repos/${{ github.repository }}/releases/${{ github.event.release.id }} --jq '.body' > release_body.md
        cat release_changelog.md >> release_body.md
        gh api /repos/${{ github.repository }}/releases/${{ github.event.release.id }} -X PATCH -F body='@release_body.md'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish package to TestPyPI
      if: inputs.test && inputs.publish_on_pypi && inputs.python_package
      uses: pypa/gh-action-pypi-publish@v1.5.0
      with:
        user: __token__
        password: ${{ secrets.PyPI_token }}
        packages_dir: main/dist/
        repository_url: https://test.pypi.org/legacy/

    - name: Publish package to PyPI
      if: ( ! inputs.test ) && inputs.publish_on_pypi && inputs.python_package
      uses: pypa/gh-action-pypi-publish@v1.5.0
      with:
        user: __token__
        password: ${{ secrets.PyPI_token }}
        packages_dir: main/dist/

  docs:
    name: Deploy release documentation
    needs: update-and-publish
    runs-on: ubuntu-latest
    if: inputs.update_docs

    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ inputs.release_branch }}

    - name: Set up Python ${{ inputs.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ inputs.python_version }}"

    - name: Install Python dependencies
      run: |
        python -m pip install -U pip
        pip install -U setuptools wheel
        pip install -e .${{ inputs.doc_extras || inputs.install_extras }}

    - name: Set up git user
      run: |
        git config --global user.name "${{ inputs.git_username }}"
        git config --global user.email "${{ inputs.git_email }}"

    - name: Deploy documentation
      run: |
        REF=${{ github.ref }}
        if [ "${{ inputs.test }}" == "true" ]; then
          echo "Will here deploy documentation using 'mike', first one called '${REF#refs/tags/v}' with alias 'stable'"
          echo "Then one called 'latest' with alias '${{ inputs.release_branch }}'"
        else
          mike deploy --push --remote origin --branch gh-pages --update-aliases --config-file mkdocs.yml ${REF#refs/tags/v} stable
          mike deploy --push --remote origin --branch gh-pages --update-aliases --config-file mkdocs.yml latest ${{ inputs.release_branch }}
        fi
